(window.webpackJsonp=window.webpackJsonp||[]).push([[40],{637:function(_,v,t){"use strict";t.r(v);var s=t(17),a=Object(s.a)({},(function(){var _=this,v=_.$createElement,t=_._self._c||v;return t("ContentSlotsDistributor",{attrs:{"slot-key":_.$parent.slotKey}},[t("h1",{attrs:{id:"day2-散列哈希"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#day2-散列哈希"}},[_._v("#")]),_._v(" DAY2 散列哈希")]),_._v(" "),t("h2",{attrs:{id:"问题"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#问题"}},[_._v("#")]),_._v(" 问题")]),_._v(" "),t("ol",[t("li",[_._v("哈希表的空间复杂度")]),_._v(" "),t("li",[_._v("哈希Map，重复的怎么算")]),_._v(" "),t("li",[_._v("webpack中生成的哈希值作用是啥？")]),_._v(" "),t("li",[_._v("哈希 什么是哈希冲突 如何解决哈希冲突")]),_._v(" "),t("li",[_._v("哈希函数 md5 sha1\n"),t("ul",[t("li",[_._v("md5: 对于原始消息做有损的压缩计算，生成消息摘要；单向不可逆；可用于密码保存")])])]),_._v(" "),t("li",[_._v("线性表散列存储哈希解决")])]),_._v(" "),t("h2",{attrs:{id:"正文"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#正文"}},[_._v("#")]),_._v(" 正文")]),_._v(" "),t("h3",{attrs:{id:"基本概念"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#基本概念"}},[_._v("#")]),_._v(" 基本概念")]),_._v(" "),t("p",[_._v("采用散列技术将记录存储在一块连续的存储空间中，这块连续的存储空间即称为散列表。")]),_._v(" "),t("p",[t("img",{attrs:{src:"https://gitee.com/PencilX/myblogassets/raw/master/src/202203211408462.png",alt:"image-20220321140806343"}})]),_._v(" "),t("p",[_._v("我们可以理解为数学函数，Y=F(X)，X 为自变量也就是这里的 Key, F( ) 对应图中的 H( )，也就是一个映射关系，Y 因变量也就是对应的值的 "),t("strong",[_._v("存放位置")])]),_._v(" "),t("br"),_._v(" "),t("p",[_._v("散列既是一种"),t("strong",[_._v("查找技术")]),_._v("，也是一种"),t("strong",[_._v("存储技术")]),_._v("。")]),_._v(" "),t("p",[_._v("散列只是通过记录的关键码定位该记录，没有完整地表达记录之间的逻辑关系，即通过关键码能推出 Key 值，但是通过关键码对应的值（即位置处的值）不能推出关键码，所以散列存储的关键码和值之间并不对称，因此"),t("strong",[_._v("散列主要是面向查找的存储结构。")])]),_._v(" "),t("h3",{attrs:{id:"优缺点"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#优缺点"}},[_._v("#")]),_._v(" 优缺点")]),_._v(" "),t("p",[_._v("优点：")]),_._v(" "),t("ol",[t("li",[_._v("查找效率高")]),_._v(" "),t("li",[_._v("高性能，时间复杂度为O(1)")])]),_._v(" "),t("p",[_._v("缺点：")]),_._v(" "),t("p",[_._v("散列表并不是适用于所有的需求场景，那么哪些情况下不适合使用呢？")]),_._v(" "),t("ol",[t("li",[t("p",[_._v("散列技术一般不适合在允许多个记录有同样关键码的情况下使用。")]),_._v(" "),t("p",[_._v("因为这种情况下，通常会有冲突存在，将会降低查找效率，体现不出散列表查找效率高的优点。")]),_._v(" "),t("p",[_._v("并且如果一定要在这个情况下使用的话，还需要想办法消除冲突，这将花费大量时间，那么就失去了 O(1) 时间复杂度的优势，所以在存在大量的冲突情况下，我们就要弃用散列表。")])]),_._v(" "),t("li",[t("p",[_._v("散列方法也不适用于范围查找，比如以下两个情况。")]),_._v(" "),t("ul",[t("li",[t("p",[_._v("查找最大值或者最小值")]),_._v(" "),t("p",[_._v("因为散列表的值是类似函数的，映射函数一个变量只能对应一个值，不知道其他值，也不能查找最大值、最小值，RMQ(区间最值问题）可以采用 ST 算法、树状数组和线段树解决。")])]),_._v(" "),t("li",[t("p",[_._v("也不可能找到在某一范围内的记录")]),_._v(" "),t("p",[_._v("比如查找小于 N 的数有多少个，是不能实现的，原因也是映射函数一个变量只能对应一个值，不知道其他值。")])])])])]),_._v(" "),t("h3",{attrs:{id:"散列技术的关键问题"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#散列技术的关键问题"}},[_._v("#")]),_._v(" 散列技术的关键问题")]),_._v(" "),t("p",[_._v("在使用散列表的时候，我们有两个关键的技术问题需要解决：")]),_._v(" "),t("ol",[t("li",[_._v("散列函数的设计，如何设计一个简单、均匀、存储利用率高的散列函数？")]),_._v(" "),t("li",[_._v("冲突的处理，如何采取合适的处理冲突方法来解决冲突。")])]),_._v(" "),t("h4",{attrs:{id:"如何设计实现散列函数"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#如何设计实现散列函数"}},[_._v("#")]),_._v(" 如何设计实现散列函数")]),_._v(" "),t("p",[_._v("在构建散列函数时，我们需要秉持两个原则：")]),_._v(" "),t("ol",[t("li",[_._v("简单\n"),t("ul",[t("li",[_._v("散列函数"),t("strong",[_._v("不应该有很大的计算量")]),_._v("，否则会降低查找效率。")])])]),_._v(" "),t("li",[_._v("均匀：\n"),t("ul",[t("li",[_._v("函数值要尽量"),t("strong",[_._v("均匀散布在地址空间")]),_._v("，这样才能保证存储空间的有效利用并减少冲突。")])])])]),_._v(" "),t("h4",{attrs:{id:"散列函数实现三种方法"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#散列函数实现三种方法"}},[_._v("#")]),_._v(" 散列函数实现三种方法")]),_._v(" "),t("h5",{attrs:{id:"_1-直接定址法"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-直接定址法"}},[_._v("#")]),_._v(" 1.直接定址法")]),_._v(" "),t("p",[_._v("散列函数是关键码（Key）的映射的线性函数，形如：")]),_._v(" "),t("p",[_._v("H(key) = a * key + b")]),_._v(" "),t("p",[_._v("来看一个小案例：")]),_._v(" "),t("blockquote",[t("p",[_._v("如果关键码的集合已知且为 [11,22,33,66,88,44,99]")]),_._v(" "),t("p",[_._v("H(key) = 1/11 * key + b")])]),_._v(" "),t("p",[t("img",{attrs:{src:"https://gitee.com/PencilX/myblogassets/raw/master/src/202203211425855.png",alt:"image-20220321142556746"}})]),_._v(" "),t("p",[t("strong",[_._v("缺点")])]),_._v(" "),t("ul",[t("li",[_._v("我们是看到了这个集合，然后想到他们都是 11 的倍数才想到这 Hash 函数。我们在平常的使用中一般不会提前知道 Key 值集合，所以使用较少。")])]),_._v(" "),t("p",[t("strong",[_._v("适用范围：")])]),_._v(" "),t("ul",[t("li",[_._v("事先知道关键码，关键码集合不大且较为连续而不离散。")])]),_._v(" "),t("h5",{attrs:{id:"_2-除留余数法"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-除留余数法"}},[_._v("#")]),_._v(" 2.除留余数法")]),_._v(" "),t("p",[t("em",[_._v("H")]),_._v("("),t("em",[_._v("k"),t("strong",[_._v("e")]),_._v("y")]),_._v(")="),t("em",[_._v("k"),t("strong",[_._v("e")]),_._v("y")]),_._v(" "),t("em",[_._v("m"),t("strong",[_._v("o")]),_._v("d")]),_._v(" "),t("em",[_._v("p")])]),_._v(" "),t("p",[_._v("来个小例子：")]),_._v(" "),t("blockquote",[t("p",[t("em",[_._v("H")]),_._v("("),t("em",[_._v("k"),t("strong",[_._v("e")]),_._v("y")]),_._v(")="),t("em",[_._v("k"),t("strong",[_._v("e")]),_._v("y")]),_._v(" "),t("em",[_._v("m"),t("strong",[_._v("o")]),_._v("d")]),_._v(" 21")])]),_._v(" "),t("p",[t("img",{attrs:{src:"https://gitee.com/PencilX/myblogassets/raw/master/src/202203211429846.png",alt:"image-20220321142910733"}})]),_._v(" "),t("p",[_._v("会发现产生了很多相同的 H(K)，这就是发生冲突，因为一个位置只能放一个数，有两个值对应这里一个位置，是不可以的。")]),_._v(" "),t("p",[_._v("这种方法是"),t("strong",[_._v("最常用")]),_._v("的方法，这个方法的关键在于如何选取 P，使得利用率较高并且冲突率较低，一般情况下，我们会选取"),t("strong",[_._v("最接近表长且小于等于表长的最大素数。")])]),_._v(" "),t("p",[t("strong",[_._v("缺点")])]),_._v(" "),t("ul",[t("li",[_._v("P 选取不当，会导致冲突率上升。")])]),_._v(" "),t("p",[t("strong",[_._v("适用范围：")])]),_._v(" "),t("ul",[t("li",[_._v("除留余数法是一种最简单、也是最常用的构造散列函数的方法，并且不要求事先知道关键码的分布。")])]),_._v(" "),t("p",[_._v("这个方法非常常用，我们后面题目的展开就是使用的这个方法。在大部分的算法实现中也都是选取的这一种方式。")]),_._v(" "),t("h5",{attrs:{id:"_3-数字分析法"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-数字分析法"}},[_._v("#")]),_._v(" 3.数字分析法")]),_._v(" "),t("p",[_._v("比如我将我的集合全部转化为 16 进制数，根据关键码在各个位上的分布情况，选取分布比较均匀的若干位组成散列地址。或者将 N 位 10 进制数，观察各各位的数字分布，选取分布均匀的散列地址。")]),_._v(" "),t("p",[_._v("举个小例子：")]),_._v(" "),t("p",[t("img",{attrs:{src:"https://gitee.com/PencilX/myblogassets/raw/master/src/202203211433981.png",alt:"image-20220321143347902"}})]),_._v(" "),t("p",[_._v("首先我们考虑一位作为散列函数，发现都是很多冲突，选取两位时，百位和十位组合最适宜，分布均匀且没有冲突。")]),_._v(" "),t("p",[_._v("当然，我们说的是这一方法的一个具体实列，既然叫做数字分析法，那么只有对于不同数据的不同分析，才能写出更是适配的 H(x)。")]),_._v(" "),t("h5",{attrs:{id:"_4-平方取中法"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_4-平方取中法"}},[_._v("#")]),_._v(" 4.平方取中法")]),_._v(" "),t("h5",{attrs:{id:"_5-折叠法"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_5-折叠法"}},[_._v("#")]),_._v(" 5.折叠法")]),_._v(" "),t("h3",{attrs:{id:"解决冲突方法"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#解决冲突方法"}},[_._v("#")]),_._v(" 解决冲突方法")]),_._v(" "),t("h4",{attrs:{id:"_1-开散列方法-open-hashing"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-开散列方法-open-hashing"}},[_._v("#")]),_._v(" 1. 开散列方法（open hashing）")]),_._v(" "),t("p",[_._v("open hashing 也称为拉链法，separate chaining 称为链地址法，简单来说，就是由关键码得到的散列地址一旦产生了冲突，就去"),t("strong",[_._v("寻找下一个空的散列地址")]),_._v("，并将记录存入。")]),_._v(" "),t("p",[_._v("寻找下一个空的散列地址的方法：")]),_._v(" "),t("br"),_._v(" "),t("p",[t("strong",[_._v("(1)线性探测法")])]),_._v(" "),t("p",[_._v("当发生冲突时，从冲突位置的下一个位置起，依次寻找空的散列地址。")]),_._v(" "),t("p",[_._v("对于键值 key，设 H(key)=d，闭散列表的长度为 m，则发生冲突时，寻找下一个散列地址的公式为：")]),_._v(" "),t("p",[t("img",{attrs:{src:"https://gitee.com/PencilX/myblogassets/raw/master/src/202203211454156.png",alt:"image-20220321145445106"}})]),_._v(" "),t("p",[t("strong",[_._v("堆积现象")]),_._v("：在处理冲突的过程中出现的非同义词之间对同一个散列地址争夺的现象。")]),_._v(" "),t("p",[_._v("例子：")]),_._v(" "),t("blockquote",[t("p",[_._v("Key 集合为 47, 7, 29, 11, 27, 92, 22, 8, 3。")]),_._v(" "),t("p",[_._v("P 值为 11，进行 Hash 映射，采用线性探测法处理冲突。")])]),_._v(" "),t("p",[t("img",{attrs:{src:"https://gitee.com/PencilX/myblogassets/raw/master/src/202203211457346.png",alt:"image-20220321145709220"}})]),_._v(" "),t("p",[t("img",{attrs:{src:"https://gitee.com/PencilX/myblogassets/raw/master/src/202203211457341.png",alt:"image-20220321145741209"}})]),_._v(" "),t("p",[t("img",{attrs:{src:"https://gitee.com/PencilX/myblogassets/raw/master/src/202203211458029.png",alt:"image-20220321145800900"}})]),_._v(" "),t("p",[t("img",{attrs:{src:"https://gitee.com/PencilX/myblogassets/raw/master/src/202203211458947.png",alt:"image-20220321145812849"}})]),_._v(" "),t("br"),_._v(" "),t("p",[t("strong",[_._v("（2）二次探测法")])]),_._v(" "),t("p",[_._v("即当发生冲突时，寻找下一个散列地址的公式为：")]),_._v(" "),t("p",[t("img",{attrs:{src:"https://gitee.com/PencilX/myblogassets/raw/master/src/202203211459899.png",alt:"image-20220321145936846"}})]),_._v(" "),t("br"),_._v(" "),t("p",[t("strong",[_._v("(3)随机探测法")])]),_._v(" "),t("p",[_._v("当发生冲突时，下一个散列地址的位移量是一个随机数列，即寻找下一个散列地址的公式为：")]),_._v(" "),t("p",[t("img",{attrs:{src:"https://gitee.com/PencilX/myblogassets/raw/master/src/202203211500187.png",alt:"image-20220321150056129"}})]),_._v(" "),t("p",[t("strong",[_._v("(4)再hash法")])]),_._v(" "),t("br"),_._v(" "),t("h4",{attrs:{id:"_2-闭散列方法"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-闭散列方法"}},[_._v("#")]),_._v(" 2.闭散列方法")]),_._v(" "),t("p",[_._v("closed hashing 也称为"),t("strong",[_._v("开地址方法")]),_._v("，open addressing 开放地址法，开放地址法中涵盖了以下两种实现方式；")]),_._v(" "),t("ul",[t("li",[t("p",[t("strong",[_._v("拉链法（链地址法）")])]),_._v(" "),t("p",[_._v("将所有散列地址相同的记录即 Key 值相同的项目，坠成一个链表，每个链表的头指针存放位置为 Key 值对应的位置。")]),_._v(" "),t("p",[t("img",{attrs:{src:"https://gitee.com/PencilX/myblogassets/raw/master/src/202203211509997.png",alt:"image-20220321150922916"}})])]),_._v(" "),t("li",[t("p",[_._v("建立公共溢出区")]),_._v(" "),t("p",[_._v("散列表包含基本表和溢出表两部分（通常溢出表和基本表的大小相同），将发生冲突的记录存储在溢出表中。")]),_._v(" "),t("p",[_._v("查找时，如果在基本表里找的到就返回成功，没找到就在溢出区顺序查找，注意这里"),t("strong",[_._v("不再是映射而是顺序查找")]),_._v("，放置时也是按照顺序的方式。")]),_._v(" "),t("p",[t("img",{attrs:{src:"https://gitee.com/PencilX/myblogassets/raw/master/src/202203211511683.png",alt:"image-20220321151120593"}})])])])])}),[],!1,null,null,null);v.default=a.exports}}]);