(window.webpackJsonp=window.webpackJsonp||[]).push([[68],{664:function(t,s,a){"use strict";a.r(s);var n=a(17),e=Object(n.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"字符串操作方法汇总"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#字符串操作方法汇总"}},[t._v("#")]),t._v(" 字符串操作方法汇总")]),t._v(" "),a("h2",{attrs:{id:"_1-concat"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-concat"}},[t._v("#")]),t._v(" 1. concat")]),t._v(" "),a("p",[t._v("可以用于拼接多个字符串，不过用"),a("code",[t._v("+")]),t._v("更方便。")]),t._v(" "),a("p",[t._v("不修改调用该方法的字符串。")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[t._v("str"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("concat")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("str1 "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" str2 "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" str3 "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("...")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),a("h2",{attrs:{id:"_2-slice、substr、substring"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-slice、substr、substring"}},[t._v("#")]),t._v(" 2. slice、subStr、subString")]),t._v(" "),a("p",[t._v("都可以只接收一个参数，此时都是截取到末尾。")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[t._v("str"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("slice")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("startIndex "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" endIndex"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 不包含endIndex")]),t._v("\nstr"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("subString")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("startIndex "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" endIndex"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 不包含endIndex")]),t._v("\nstr"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("subStr")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("startIndex "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" length"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 开始索引 ， 返回的字符串长度")]),t._v("\n")])])]),a("p",[t._v("参数为负值的情况记忆方法：")]),t._v(" "),a("p",[a("code",[t._v("subString")]),t._v("从字面意思看是子字符串，那么开始索引和结束索引不能为负，所以如果为负都会转为0，两都为负就返回空字符串。")]),t._v(" "),a("p",[a("code",[t._v("slice")]),t._v("字面意思为切片，无论如何都会给你切（python切片就可以是负值）,所以如果为负都会转换为长度加上负值。")]),t._v(" "),a("p",[a("code",[t._v("subStr")]),t._v("这个做个折中，第一个参数为负就加上长度，第二个为负就变成0.")]),t._v(" "),a("h2",{attrs:{id:"_3-indexof、lastindexof"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-indexof、lastindexof"}},[t._v("#")]),t._v(" 3. indexOf、lastIndexOf")]),t._v(" "),a("p",[t._v("接收一个字符串，接收一个可选的第二参数表示开始搜索的位置索引。")]),t._v(" "),a("p",[t._v("找到返回索引，找不到返回-1。(记忆为什么返回-1而不是undefined或null，因为正常找到返回的索引是数字，统一一下就用-1)")]),t._v(" "),a("p",[t._v("利用第二参数可以实现找出字符串中所有传入字符的索引。")]),t._v(" "),a("h2",{attrs:{id:"_4-startswith、endswith、includes"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-startswith、endswith、includes"}},[t._v("#")]),t._v(" 4. startsWith、endsWith、includes")]),t._v(" "),a("p",[t._v("es6提供的三个新方法。")]),t._v(" "),a("p",[t._v("返回一个布尔值，表示是否包含传入的字符串。")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[t._v("str"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("startsWith")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("str1 "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" startIndex"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// str开头是否包含")]),t._v("\nstr"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("endswith")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("str2"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// str结尾是否包含")]),t._v("\nstr"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("includes")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("str3 "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" startIndex"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 整个字符串是否包含")]),t._v("\n")])])]),a("p",[t._v("记忆一下函数名称：动词后都有个's'，嗯，第三人称单数哈哈哈")]),t._v(" "),a("p",[t._v("第二个参数传入负数都相当于没传。")]),t._v(" "),a("h2",{attrs:{id:"_5-trim、trimleft、trimright"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_5-trim、trimleft、trimright"}},[t._v("#")]),t._v(" 5. trim、trimLeft、trimRight")]),t._v(" "),a("p",[t._v("清除字符串前后、前、后的空格。")]),t._v(" "),a("h2",{attrs:{id:"_6-repeat"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_6-repeat"}},[t._v("#")]),t._v(" 6. repeat")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[t._v("str"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("repeat")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("number"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 把str复制number次后拼接起来")]),t._v("\n")])])]),a("h2",{attrs:{id:"_7-padstart、padend"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_7-padstart、padend"}},[t._v("#")]),t._v(" 7. padStart、padEnd")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[t._v("str"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("padStart")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("length "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" str1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\nstr"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("padEnd")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("length "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" str1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),a("h2",{attrs:{id:"_8"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_8"}},[t._v("#")]),t._v(" 8. "),a("code",[t._v("...")])]),t._v(" "),a("p",[t._v("由于字符串实现了"),a("code",[t._v("@@iterator")]),t._v("，可以用解构操作符解构，也可以用"),a("code",[t._v("for of")]),t._v("遍历。")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" arr "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("...")]),t._v("str"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" strIterator "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" str"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("Symbol"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("iterator"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 获得迭代器")]),t._v("\nstrIterator"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("next")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),a("h2",{attrs:{id:"_9-touppercase、tolowercase、tolocaleuppercase、tolocalelowercase"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_9-touppercase、tolowercase、tolocaleuppercase、tolocalelowercase"}},[t._v("#")]),t._v(" 9. toUpperCase、toLowerCase、toLocaleUpperCase、toLocaleLowerCase")]),t._v(" "),a("p",[a("code",[t._v("toUpperCase")]),t._v("和"),a("code",[t._v("toLowerCase")]),t._v("没有参数，分别把字符串转为大写和小写")]),t._v(" "),a("p",[a("code",[t._v("toLocaleUpperCase")]),t._v("和"),a("code",[t._v("toLocaleLowerCase")]),t._v("可以选择性接收一个locale或locale数组，指定转换规则，默认转换规则是根据主机的语言来确定，因为有些地区语言比较特殊，所以用这两个方法会比较安全一些。但是有没有副作用不知道，后面查查资料。")]),t._v(" "),a("h2",{attrs:{id:"_10-match、search、replace"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_10-match、search、replace"}},[t._v("#")]),t._v(" 10. match、search、replace")]),t._v(" "),a("p",[t._v("match顾名思义：匹配，所以可以传正则,返回和exec一样返回的对象")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" res "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" str"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("match")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("正则表达式字符串或RegExp对象"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 返回一个对象，如下形式，和正则的exec返回的对象一样，可以猜想里面就是用的正则exec")]),t._v("\nres "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("index")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("arr")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'xxx'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("p",[t._v("search搜索指定模式，传入正则，返回匹配的第一个字符索引。相当于返回了上面那个对象的index")]),t._v(" "),a("p",[t._v("replace")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 最简单用法")]),t._v("\nstr"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("replace")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("str1 "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" str2"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 只会替换第一个字符串，要想替换所有字符串，必须使用带全局标记的正则")]),t._v("\n\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 正则")]),t._v("\nstr"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("replace")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("RegExp "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" str2"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),a("p",[t._v("replace更秀的用法是第二个参数用函数，"),a("code",[t._v("fn(匹配到的字符串，匹配到的字符串第一个字符的索引，整个字符串)")])]),t._v(" "),a("h2",{attrs:{id:"_11-split"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_11-split"}},[t._v("#")]),t._v(" 11. split")]),t._v(" "),a("p",[t._v("很常用，但一般都不知道它有第二个参数。")]),t._v(" "),a("p",[t._v("第一个参数可以是普通字符串也可以是正则，第二个可选参数指定返回的数组长度，超过长度的部分被舍去。")]),t._v(" "),a("h2",{attrs:{id:"_12-localecompare"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_12-localecompare"}},[t._v("#")]),t._v(" 12. localeCompare")])])}),[],!1,null,null,null);s.default=e.exports}}]);