(window.webpackJsonp=window.webpackJsonp||[]).push([[101],{697:function(t,s,a){"use strict";a.r(s);var e=a(17),r=Object(e.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h3",{attrs:{id:"特殊字符"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#特殊字符"}},[t._v("#")]),t._v(" 特殊字符")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("特殊字符")]),t._v(" "),a("th",[t._v("正则表达式")]),t._v(" "),a("th",[t._v("记忆方式")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("换行符")]),t._v(" "),a("td",[t._v("\\n")]),t._v(" "),a("td",[a("strong",[t._v("n")]),t._v("ew line")])]),t._v(" "),a("tr",[a("td",[t._v("换页符")]),t._v(" "),a("td",[t._v("\\f")]),t._v(" "),a("td",[a("strong",[t._v("f")]),t._v("orm feed")])]),t._v(" "),a("tr",[a("td",[t._v("回车符")]),t._v(" "),a("td",[t._v("\\r")]),t._v(" "),a("td",[a("strong",[t._v("r")]),t._v("eturn")])]),t._v(" "),a("tr",[a("td",[t._v("空白符")]),t._v(" "),a("td",[t._v("\\s")]),t._v(" "),a("td",[a("strong",[t._v("s")]),t._v("pace")])]),t._v(" "),a("tr",[a("td",[t._v("制表符")]),t._v(" "),a("td",[t._v("\\t")]),t._v(" "),a("td",[a("strong",[t._v("t")]),t._v("ab")])]),t._v(" "),a("tr",[a("td",[t._v("垂直制表符")]),t._v(" "),a("td",[t._v("\\v")]),t._v(" "),a("td",[a("strong",[t._v("v")]),t._v("ertical tab")])]),t._v(" "),a("tr",[a("td",[t._v("回退符")]),t._v(" "),a("td",[t._v("[\\b]")]),t._v(" "),a("td",[a("strong",[t._v("b")]),t._v("ackspace,之所以使用[]符号是避免和\\b重复")])])])]),t._v(" "),a("h3",{attrs:{id:"匹配多字符"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#匹配多字符"}},[t._v("#")]),t._v(" 匹配多字符")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("匹配区间")]),t._v(" "),a("th",[t._v("正则表达式")]),t._v(" "),a("th",[t._v("记忆方式")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("除了换行符之外的任何字符")]),t._v(" "),a("td",[t._v(".")]),t._v(" "),a("td",[t._v("句号,除了句子结束符")])]),t._v(" "),a("tr",[a("td",[t._v("单个数字, [0-9]")]),t._v(" "),a("td",[t._v("\\d")]),t._v(" "),a("td",[t._v("digit")])]),t._v(" "),a("tr",[a("td",[t._v("除了[0-9]")]),t._v(" "),a("td",[t._v("\\D")]),t._v(" "),a("td",[t._v("not digit")])]),t._v(" "),a("tr",[a("td",[t._v("包括下划线在内的单个字符，[A-Za-z0-9_]")]),t._v(" "),a("td",[t._v("\\w")]),t._v(" "),a("td",[t._v("word")])]),t._v(" "),a("tr",[a("td",[t._v("非单字字符")]),t._v(" "),a("td",[t._v("\\W")]),t._v(" "),a("td",[t._v("not word")])]),t._v(" "),a("tr",[a("td",[t._v("匹配空白字符,包括空格、制表符、换页符和换行符")]),t._v(" "),a("td",[t._v("\\s")]),t._v(" "),a("td",[t._v("space")])]),t._v(" "),a("tr",[a("td",[t._v("匹配非空白字符")]),t._v(" "),a("td",[t._v("\\S")]),t._v(" "),a("td",[t._v("not space")])])])]),t._v(" "),a("h3",{attrs:{id:"单词边界"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#单词边界"}},[t._v("#")]),t._v(" 单词边界")]),t._v(" "),a("p",[a("code",[t._v("\\b")]),t._v(",boundary,在正则引擎里它其实匹配的是能构成单词的字符(\\w)和不能构成单词的字符(\\W)中间的那个位置。")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[t._v("The cat scattered his food all over the room"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("\\bcat\\b"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 匹配cat这个单词，而不会匹配到scattered里的cat")]),t._v("\n")])])]),a("h3",{attrs:{id:"字符串边界"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#字符串边界"}},[t._v("#")]),t._v(" 字符串边界")]),t._v(" "),a("p",[a("code",[t._v("^")]),t._v("表示开头")]),t._v(" "),a("p",[a("code",[t._v("$")]),t._v("表示结尾")]),t._v(" "),a("h3",{attrs:{id:"匹配模式"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#匹配模式"}},[t._v("#")]),t._v(" 匹配模式")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("I")]),t._v(" am scq000"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("I")]),t._v(" am scq000"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("I")]),t._v(" am scq000"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("^")]),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("I")]),t._v(" am scq000\\"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("$"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("m    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// m , multiple line 多行模式排除换行符的干扰")]),t._v("\n")])])]),a("p",[a("code",[t._v("i")]),t._v(" 忽略大小写 ignore")]),t._v(" "),a("p",[a("code",[t._v("g")]),t._v("找到所有符合的匹配")]),t._v(" "),a("h3",{attrs:{id:"回溯引用"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#回溯引用"}},[t._v("#")]),t._v(" 回溯引用")]),t._v(" "),a("p",[a("code",[t._v("\\1")]),t._v("引用第一个子表达式")]),t._v(" "),a("p",[a("code",[t._v("\\2")]),t._v("引用第二个子表达式")]),t._v(" "),a("p",[a("code",[t._v("\\0")]),t._v("引用整个表达式")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[t._v("Hello what what is the first thing"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" and "),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("I")]),t._v(" am am scq000"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("\n")])])]),a("p",[t._v("匹配上面句子中两个连续相同的单词"),a("code",[t._v("/\\b(\\w+)\\s\\1/")])]),t._v(" "),a("h3",{attrs:{id:"替换字符串"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#替换字符串"}},[t._v("#")]),t._v(" 替换字符串")]),t._v(" "),a("p",[t._v("回溯引用在替换字符串中语法上有些区别,使用"),a("code",[t._v("$1")]),t._v(","),a("code",[t._v("$2")]),t._v(","),a("code",[t._v("$0")])]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" str "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'abc abc 123'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nstr"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("replace")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token regex"}},[a("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")]),a("span",{pre:!0,attrs:{class:"token regex-source language-regex"}},[t._v("(ab)c")]),a("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")]),a("span",{pre:!0,attrs:{class:"token regex-flags"}},[t._v("g")])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'$1g'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 得到结果 'abg abg 123'")]),t._v("\n")])])]),a("h3",{attrs:{id:"非捕获正则"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#非捕获正则"}},[t._v("#")]),t._v(" 非捕获正则")]),t._v(" "),a("p",[t._v("如果我们不想子表达式被引用，可以使用"),a("strong",[t._v("非捕获")]),t._v("正则"),a("code",[t._v("(?:regex)")]),t._v("这样就可以避免浪费内存。")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" str "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'scq000'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("\nstr"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("replace")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token regex"}},[a("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")]),a("span",{pre:!0,attrs:{class:"token regex-source language-regex"}},[t._v("(scq00)(?:0)")]),a("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'$1,$2'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 返回scq00,$2")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 由于使用了非捕获正则，所以第二个引用没有值，这里直接替换为$2")]),t._v("\n")])])]),a("h3",{attrs:{id:"摘抄自文章"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#摘抄自文章"}},[t._v("#")]),t._v(" 摘抄自文章")]),t._v(" "),a("p",[a("a",{attrs:{href:"https://juejin.cn/post/6844903845227659271#heading-3",target:"_blank",rel:"noopener noreferrer"}},[t._v("正则表达式不要背 - 掘金"),a("OutboundLink")],1)])])}),[],!1,null,null,null);s.default=r.exports}}]);